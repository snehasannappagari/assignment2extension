package Extension;
class Driver {
	    private String name;
	    private String carModel;
	    private double rating;
	    private double distFromCust;
	    private String prefDest;

	    public Driver(String name, String carModel, double rating, double distFromCust, String prefDest) {
	        this.name = name;
	        this.carModel = carModel;
	        this.rating = rating;
	        this.distFromCust = distFromCust;
	        this.prefDest = prefDest;
	    }

	    public String getName() {
	        return name;
	    }

	    public String getCarModel() {
	        return carModel;
	    }

	    public double getRating() {
	        return rating;
	    }

	    public double getDistanceFromCustomer() {
	        return distFromCust;
	    }

	    public String getPreferredDestination() {
	        return prefDest;
	    }
	}

	class Ride {
	    private double distance;
	    private String carReq;
	    private String destination;

	    public Ride(double distance, String carRequested, String destination) {
	        this.distance = distance;
	        this.carReq = carRequested;
	        this.destination = destination;
	    }

	    public double getDistance() {
	        return distance;
	    }

	    public String getCarRequested() {
	        return carReq;
	    }

	    public String getDestination() {
	        return destination;
	    }
	}

	class RentARide {
	    private Driver[] drivers;

	    public RentARide(Driver[] drivers) {
	        this.drivers = drivers;
	    }

	    public String findDriverForRide(Ride ride) {
	        double shortestDistance = Double.MAX_VALUE;
	        Driver closestDriver = null;
	        boolean specificCarRequested = (ride.getCarRequested() != null && !ride.getCarRequested().isEmpty());
	        boolean carFound = false;

	        for (Driver driver : drivers) {
	            if (driver.getRating() < 4) {
	                continue;
	            }

	            if (specificCarRequested) {
	                if (driver.getCarModel().equalsIgnoreCase(ride.getCarRequested())) {
	                    carFound = true;
	                    if (driver.getDistanceFromCustomer() < shortestDistance) {
	                        shortestDistance = driver.getDistanceFromCustomer();
	                        closestDriver = driver;
	                    }
	                }
	            } else {
	                if (driver.getDistanceFromCustomer() < shortestDistance) {
	                    shortestDistance = driver.getDistanceFromCustomer();
	                    closestDriver = driver;
	                }
	            }
	        }

	        if (closestDriver != null) {
	            if (!specificCarRequested || (specificCarRequested && carFound)) {
	                if (closestDriver.getPreferredDestination().contains(ride.getDestination())) {
	                    return "Driver " + closestDriver.getName() + " will take you to the destination." +
	                            " Your charge will be Rs " + (ride.getDistance() * 8);
	                } else {
	                    closestDriver = null;
	                    shortestDistance = Double.MAX_VALUE;

	                    for (Driver driver : drivers) {
	                        if (driver.getRating() < 4) {
	                            continue;
	                        }

	                        if (specificCarRequested) {
	                            if (driver.getCarModel().equalsIgnoreCase(ride.getCarRequested())) {
	                                if (driver.getDistanceFromCustomer() < shortestDistance) {
	                                    shortestDistance = driver.getDistanceFromCustomer();
	                                    closestDriver = driver;
	                                }
	                            }
	                        } else {
	                            if (driver.getDistanceFromCustomer() < shortestDistance) {
	                                shortestDistance = driver.getDistanceFromCustomer();
	                                closestDriver = driver;
	                            }
	                        }
	                    }

	                    if (closestDriver != null) {
	                        return "Driver " + closestDriver.getName() + " will take you to the destination." +
	                                " Your charge will be Rs " + (ride.getDistance() * 8);
	                    } else {
	                        return "No suitable driver found for your ride request.";
	                    }
	                }
	            } else {
	                return "No driver available for the requested car model. Please select another car.";
	            }
	        } else {
	            return "No suitable driver found for your ride request.";
	        }
	    }
	}

	package Extension;

import java.util.Scanner;

public class Rentride {
	    public static void main(String[] args) {
	        Driver[] drivers = {
	                new Driver("A", "5 Seater", 4, 500, "Gurgaon, Noida, Delhi"),
	                new Driver("B", "HatchBack", 4.3, 1000, "Gurgaon"),
	                new Driver("C", "5 Seater", 4.8, 200, "Noida"),
	                new Driver("D", "Sedan", 4.1, 700, "Noida"),
	                new Driver("E", "5 Seater", 4.7, 430, "Delhi")
	        };

	        Scanner sc = new Scanner(System.in);

	        System.out.print("Customer Ride Distance: ");
	        double rideDis = sc.nextDouble();
	        sc.nextLine();

	        System.out.print("Car Requested: ");
	        String carReq = sc.nextLine();
	        
	        System.out.print("Destination: ");
	        String dest = sc.nextLine();
	        Ride ride = new Ride(rideDis, carReq, dest);

	        RentARide rentRide = new RentARide(drivers);
	        String result = rentRide.findDriverForRide(ride);
	        System.out.println(result);
	        sc.close();
	    }
}


